#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ Tipster
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/run-example.sh <example-name>
# –ü—Ä–∏–º–µ—Ä—ã: basic, family, rules, animals, math, interactive, all

EXAMPLE_NAME="$1"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
show_description() {
    local example_name="$1"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Clojure –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
    local desc=$(clj -M:examples -e "
    (require '[${example_name} :as ex])
    (let [desc (ex/description)]
      (println (:title desc))
      (println (:subtitle desc))
      (println \"==============================\"))")
    
    echo "$desc"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —á—Ç–æ –∏–∑—É—á–∏–ª–∏
show_what_you_learned() {
    local example_name="$1"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —á—Ç–æ –∏–∑—É—á–∏–ª–∏
    local learned=$(clj -M:examples -e "
    (require '[${example_name} :as ex])
    (let [desc (ex/description)]
      (println)
      (println \"üí° –ß—Ç–æ –≤—ã –∏–∑—É—á–∏–ª–∏:\")
      (doseq [item (:what-you-learn desc)]
        (println \"   ‚Ä¢\" item))
      (println)
      (when (:next desc)
        (println \"üìñ –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä:\" (:next desc))))")
    
    echo "$desc"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
run_example() {
    local example_name="$1"
    
    show_description "$example_name"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
    clj -M:examples -e "
    (require '[${example_name} :as ex])
    (ex/run-example)"
    
    show_what_you_learned "$example_name"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
run_all_examples() {
    echo "üöÄ TIPSTER - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
    echo $(printf '%*s' 60 '' | tr ' ' '=')
    echo "–õ–æ–≥–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫ –¥–ª—è Clojure —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–∫—Ç–æ–≤, –ø—Ä–∞–≤–∏–ª –∏ –∑–∞–ø—Ä–æ—Å–æ–≤"
    echo $(printf '%*s' 60 '' | tr ' ' '=')
    
    local examples=("basic" "family" "rules" "animals" "math" "interactive")
    
    for example in "${examples[@]}"; do
        clj -M:examples -e "
        (require '[${example} :as ex])
        (ex/run-example)"
    done
    
    echo ""
    echo "üéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
    echo ""
    echo "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:"
    echo "   ./scripts/run-example.sh basic"
    echo "   ./scripts/run-example.sh family"
    echo "   ./scripts/run-example.sh rules"
    echo "   ./scripts/run-example.sh animals"
    echo "   ./scripts/run-example.sh math"
    echo "   ./scripts/run-example.sh interactive"
    echo ""
    echo "üìñ –ò–ª–∏ –∏–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤ —Ñ–∞–π–ª–µ: examples/README.md"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "$EXAMPLE_NAME" in
    "basic"|"family"|"rules"|"animals"|"math"|"interactive")
        run_example "$EXAMPLE_NAME"
        ;;
    "all"|"")
        run_all_examples
        ;;
    "list")
        echo "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:"
        echo "   basic       - –û—Å–Ω–æ–≤—ã: —Ñ–∞–∫—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å—ã"
        echo "   family      - –°–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
        echo "   rules       - –ü—Ä–∞–≤–∏–ª–∞ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥"
        echo "   animals     - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö"
        echo "   math        - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
        echo "   interactive - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
        echo "   all         - –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–¥—Ä—è–¥"
        ;;
    *)
        echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä: $EXAMPLE_NAME"
        echo ""
        echo "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:"
        echo "   basic, family, rules, animals, math, interactive, all"
        echo ""
        echo "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/run-example.sh <example-name>"
        echo "üí° –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤: ./scripts/run-example.sh list"
        exit 1
        ;;
esac 
