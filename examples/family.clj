(ns family
  (:require [tipster.core :as tipster]
            [tipster.i18n :as i18n]))

(defn description
  "Example description / –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞"
  [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  (case lang
    :ru {:title "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–∏–º–µ—Ä 2: –°–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
         :subtitle "–ò–∑—É—á–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏"
         :what-you-learn ["–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤"
                          "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–∏–∫–∞—Ç–æ–≤"
                          "–ó–∞–ø—Ä–æ—Å—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"
                          "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π"]
         :next "./scripts/run-example.sh rules"}
    :en {:title "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Example 2: Family Relationships"
         :subtitle "Learning connections between data"
         :what-you-learn ["Creating connected facts"
                          "Using compound predicates"
                          "Queries with multiple variables"
                          "Modeling real-world relationships"]
         :next "./scripts/run-example.sh rules"}))

(defn run-example
  "Run family relationships example / –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Å–µ–º–µ–π–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π"
  [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  (let [desc (description :lang lang)]
    (println "\n" (:title desc))
    (println (apply str (repeat 50 "=")))
    
    (tipster/reset-tipster!)
    
    ;; Family facts / –§–∞–∫—Ç—ã –æ —Å–µ–º—å–µ
    (tipster/deffact (—Ä–æ–¥–∏—Ç–µ–ª—å –∞–ª–∏—Å–∞ –±–æ–±))
    (tipster/deffact (—Ä–æ–¥–∏—Ç–µ–ª—å –±–æ–± —á–∞—Ä–ª–∏))
    (tipster/deffact (—Ä–æ–¥–∏—Ç–µ–ª—å –±–æ–± –¥—ç–≤–∏–¥))
    (tipster/deffact (—Ä–æ–¥–∏—Ç–µ–ª—å —á–∞—Ä–ª–∏ –µ–≤–∞))
    
    ;; Gender facts / –§–∞–∫—Ç—ã –æ –ø–æ–ª–µ
    (tipster/deffact (–º—É–∂—á–∏–Ω–∞ –±–æ–±))
    (tipster/deffact (–º—É–∂—á–∏–Ω–∞ —á–∞—Ä–ª–∏))
    (tipster/deffact (–º—É–∂—á–∏–Ω–∞ –¥—ç–≤–∏–¥))
    (tipster/deffact (–∂–µ–Ω—â–∏–Ω–∞ –∞–ª–∏—Å–∞))
    (tipster/deffact (–∂–µ–Ω—â–∏–Ω–∞ –µ–≤–∞))
    
    (case lang
      :ru (do
            (println "\nüìù –î–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–∫—Ç—ã –æ —Å–µ–º—å–µ:")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å –∞–ª–∏—Å–∞ –±–æ–±)")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å –±–æ–± —á–∞—Ä–ª–∏)")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å –±–æ–± –¥—ç–≤–∏–¥)")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å —á–∞—Ä–ª–∏ –µ–≤–∞)")
            (println "   + —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª–µ")
            
            (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö—Ç–æ —á–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å?")
            (println "   query: (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y)")
            (doseq [result (tipster/query (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y))]
              (println "   ‚úì " result))
            
            (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö—Ç–æ –º—É–∂—á–∏–Ω–∞?")
            (println "   query: (–º—É–∂—á–∏–Ω–∞ ?X)")
            (doseq [result (tipster/query (–º—É–∂—á–∏–Ω–∞ ?X))]
              (println "   ‚úì " result)))
      :en (do
            (println "\nüìù Added family facts:")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å –∞–ª–∏—Å–∞ –±–æ–±)     ; (parent alice bob)")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å –±–æ–± —á–∞—Ä–ª–∏)     ; (parent bob charlie)")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å –±–æ–± –¥—ç–≤–∏–¥)     ; (parent bob david)")
            (println "   (—Ä–æ–¥–∏—Ç–µ–ª—å —á–∞—Ä–ª–∏ –µ–≤–∞)     ; (parent charlie eva)")
            (println "   + gender facts")
            
            (println "\n‚ùì Query: Who is whose parent?")
            (println "   query: (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y)   ; (parent ?X ?Y)")
            (doseq [result (tipster/query (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y))]
              (println "   ‚úì " result))
            
            (println "\n‚ùì Query: Who is male?")
            (println "   query: (–º—É–∂—á–∏–Ω–∞ ?X)   ; (male ?X)")
            (doseq [result (tipster/query (–º—É–∂—á–∏–Ω–∞ ?X))]
              (println "   ‚úì " result)))))) 
