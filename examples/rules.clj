(ns rules
  (:require [tipster.core :as tipster]
            [tipster.i18n :as i18n]))

(defn description
  "Example description / –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞"
  [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  (case lang
    :ru {:title "üß† –ü—Ä–∏–º–µ—Ä 3: –ü—Ä–∞–≤–∏–ª–∞ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥"
         :subtitle "–ò–∑—É—á–∞–µ–º –º–æ—â—å –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
         :what-you-learn ["–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å defrule"
                          "–õ–æ–≥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤"
                          "–¶–µ–ø–æ—á–∫–∏ –ø—Ä–∞–≤–∏–ª –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞"
                          "–£—Å–ª–æ–≤–∏—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö"]
         :next "./scripts/run-example.sh animals"}
    :en {:title "üß† Example 3: Rules and Logical Inference"
         :subtitle "Learning the power of logic programming"
         :what-you-learn ["Creating rules with defrule"
                          "Logical inference of new facts"
                          "Rule chains and derived rules"
                          "Conditions in rules"]
         :next "./scripts/run-example.sh animals"}))

(defn run-example
  "Run rules and logical inference example / –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª –∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞"
  [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  (let [desc (description :lang lang)]
    (println "\n" (:title desc))
    (println (apply str (repeat 50 "=")))
    
    (tipster/reset-tipster!)
    
    ;; Facts / –§–∞–∫—Ç—ã
    (tipster/deffact (—Ä–æ–¥–∏—Ç–µ–ª—å –∞–ª–∏—Å–∞ –±–æ–±))
    (tipster/deffact (—Ä–æ–¥–∏—Ç–µ–ª—å –±–æ–± —á–∞—Ä–ª–∏))
    (tipster/deffact (—Ä–æ–¥–∏—Ç–µ–ª—å —á–∞—Ä–ª–∏ –¥—ç–≤–∏–¥))
    (tipster/deffact (–º—É–∂—á–∏–Ω–∞ –±–æ–±))
    (tipster/deffact (–º—É–∂—á–∏–Ω–∞ —á–∞—Ä–ª–∏))
    (tipster/deffact (–∂–µ–Ω—â–∏–Ω–∞ –∞–ª–∏—Å–∞))
    
    ;; Logical inference rules / –ü—Ä–∞–≤–∏–ª–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞
    (tipster/defrule (–¥–µ–¥—É—à–∫–∞ ?X ?Z) 
                     [(—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y) (—Ä–æ–¥–∏—Ç–µ–ª—å ?Y ?Z) (–º—É–∂—á–∏–Ω–∞ ?X)])
    
    (tipster/defrule (–±–∞–±—É—à–∫–∞ ?X ?Z) 
                     [(—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y) (—Ä–æ–¥–∏—Ç–µ–ª—å ?Y ?Z) (–∂–µ–Ω—â–∏–Ω–∞ ?X)])
    
    (tipster/defrule (–≤–Ω—É–∫ ?Z ?X) 
                     [(–¥–µ–¥—É—à–∫–∞ ?X ?Z)])
    
    (case lang
      :ru (do
            (println "\nüìù –î–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–∫—Ç—ã + –ø—Ä–∞–≤–∏–ª–∞:")
            (println "   –ü—Ä–∞–≤–∏–ª–æ: (–¥–µ–¥—É—à–∫–∞ ?X ?Z) :- (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y), (—Ä–æ–¥–∏—Ç–µ–ª—å ?Y ?Z), (–º—É–∂—á–∏–Ω–∞ ?X)")
            (println "   –ü—Ä–∞–≤–∏–ª–æ: (–±–∞–±—É—à–∫–∞ ?X ?Z) :- (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y), (—Ä–æ–¥–∏—Ç–µ–ª—å ?Y ?Z), (–∂–µ–Ω—â–∏–Ω–∞ ?X)")
            (println "   –ü—Ä–∞–≤–∏–ª–æ: (–≤–Ω—É–∫ ?Z ?X) :- (–¥–µ–¥—É—à–∫–∞ ?X ?Z)")
            
            (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö—Ç–æ –¥–µ–¥—É—à–∫–∞? (–ø—Ä–∞–≤–∏–ª–æ)")
            (println "   query: (–¥–µ–¥—É—à–∫–∞ ?X ?Y)")
            (doseq [result (tipster/query (–¥–µ–¥—É—à–∫–∞ ?X ?Y))]
              (println "   ‚úì " result))
            
            (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö—Ç–æ –±–∞–±—É—à–∫–∞? (–ø—Ä–∞–≤–∏–ª–æ)")
            (println "   query: (–±–∞–±—É—à–∫–∞ ?X ?Y)")
            (doseq [result (tipster/query (–±–∞–±—É—à–∫–∞ ?X ?Y))]
              (println "   ‚úì " result))
            
            (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö—Ç–æ –≤–Ω—É–∫? (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)")
            (println "   query: (–≤–Ω—É–∫ ?X ?Y)")
            (doseq [result (tipster/query (–≤–Ω—É–∫ ?X ?Y))]
              (println "   ‚úì " result)))
      :en (do
            (println "\nüìù Added facts + rules:")
            (println "   Rule: (–¥–µ–¥—É—à–∫–∞ ?X ?Z) :- (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y), (—Ä–æ–¥–∏—Ç–µ–ª—å ?Y ?Z), (–º—É–∂—á–∏–Ω–∞ ?X)")
            (println "         ; (grandfather ?X ?Z) :- (parent ?X ?Y), (parent ?Y ?Z), (male ?X)")
            (println "   Rule: (–±–∞–±—É—à–∫–∞ ?X ?Z) :- (—Ä–æ–¥–∏—Ç–µ–ª—å ?X ?Y), (—Ä–æ–¥–∏—Ç–µ–ª—å ?Y ?Z), (–∂–µ–Ω—â–∏–Ω–∞ ?X)")
            (println "         ; (grandmother ?X ?Z) :- (parent ?X ?Y), (parent ?Y ?Z), (female ?X)")
            (println "   Rule: (–≤–Ω—É–∫ ?Z ?X) :- (–¥–µ–¥—É—à–∫–∞ ?X ?Z)")
            (println "         ; (grandson ?Z ?X) :- (grandfather ?X ?Z)")
            
            (println "\n‚ùì Query: Who is grandfather? (rule)")
            (println "   query: (–¥–µ–¥—É—à–∫–∞ ?X ?Y)   ; (grandfather ?X ?Y)")
            (doseq [result (tipster/query (–¥–µ–¥—É—à–∫–∞ ?X ?Y))]
              (println "   ‚úì " result))
            
            (println "\n‚ùì Query: Who is grandmother? (rule)")
            (println "   query: (–±–∞–±—É—à–∫–∞ ?X ?Y)   ; (grandmother ?X ?Y)")
            (doseq [result (tipster/query (–±–∞–±—É—à–∫–∞ ?X ?Y))]
              (println "   ‚úì " result))
            
            (println "\n‚ùì Query: Who is grandson? (derived rule)")
            (println "   query: (–≤–Ω—É–∫ ?X ?Y)   ; (grandson ?X ?Y)")
            (doseq [result (tipster/query (–≤–Ω—É–∫ ?X ?Y))]
              (println "   ‚úì " result)))))) 
