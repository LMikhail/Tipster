(ns animals
  (:require [tipster.core :as tipster]
            [tipster.i18n :as i18n]))

(defn description
  "Example description / –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞"
  [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  (case lang
    :ru {:title "üê± –ü—Ä–∏–º–µ—Ä 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö"
         :subtitle "–ò–∑—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
         :what-you-learn ["–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                          "–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞"
                          "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è"
                          "–°–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π"]
         :next "./scripts/run-example.sh math"}
    :en {:title "üê± Example 4: Animal Classification"
         :subtitle "Learning classification systems"
         :what-you-learn ["Building classification systems"
                          "Hierarchical rules"
                          "Automatic categorization"
                          "Expert knowledge systems"]
         :next "./scripts/run-example.sh math"}))

(defn run-example
  "Run animal classification example / –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö"
  [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  (println "\nüîπ –ü—Ä–∏–º–µ—Ä 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö")
  (println (apply str (repeat 50 "=")))
  
  (tipster/reset-tipster!)
  
  ;; –§–∞–∫—Ç—ã –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
  (tipster/deffact (–∂–∏–≤–æ—Ç–Ω–æ–µ —Å–æ–±–∞–∫–∞))
  (tipster/deffact (–∂–∏–≤–æ—Ç–Ω–æ–µ –∫–æ—à–∫–∞))
  (tipster/deffact (–∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–ø—É–≥–∞–π))
  (tipster/deffact (–∂–∏–≤–æ—Ç–Ω–æ–µ —Ä—ã–±–∞))
  
  ;; –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  (tipster/deffact (–∏–º–µ–µ—Ç-—à–µ—Ä—Å—Ç—å —Å–æ–±–∞–∫–∞))
  (tipster/deffact (–∏–º–µ–µ—Ç-—à–µ—Ä—Å—Ç—å –∫–æ—à–∫–∞))
  (tipster/deffact (–∏–º–µ–µ—Ç-–ø–µ—Ä—å—è –ø–æ–ø—É–≥–∞–π))
  (tipster/deffact (–∂–∏–≤–µ—Ç-–≤-–≤–æ–¥–µ —Ä—ã–±–∞))
  (tipster/deffact (–º–æ–∂–µ—Ç-–ª–µ—Ç–∞—Ç—å –ø–æ–ø—É–≥–∞–π))
  
  ;; –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  (tipster/defrule (–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ ?X) 
                   [(–∂–∏–≤–æ—Ç–Ω–æ–µ ?X) (–∏–º–µ–µ—Ç-—à–µ—Ä—Å—Ç—å ?X)])
  
  (tipster/defrule (–ø—Ç–∏—Ü–∞ ?X) 
                   [(–∂–∏–≤–æ—Ç–Ω–æ–µ ?X) (–∏–º–µ–µ—Ç-–ø–µ—Ä—å—è ?X)])
  
  (tipster/defrule (–ª–µ—Ç–∞—é—â–µ–µ ?X) 
                   [(–ø—Ç–∏—Ü–∞ ?X) (–º–æ–∂–µ—Ç-–ª–µ—Ç–∞—Ç—å ?X)])
  
  (tipster/defrule (–¥–æ–º–∞—à–Ω–µ–µ ?X) 
                   [(–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ ?X)])
  
  (println "\nüìù –°–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")
  
  (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö–∞–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–∏–µ?")
  (println "   query: (–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ ?X)")
  (doseq [result (tipster/query (–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ ?X))]
    (println "   ‚úì " result))
  
  (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö–∞–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ç–∏—Ü—ã?")
  (println "   query: (–ø—Ç–∏—Ü–∞ ?X)")
  (doseq [result (tipster/query (–ø—Ç–∏—Ü–∞ ?X))]
    (println "   ‚úì " result))
  
  (println "\n‚ùì –ó–∞–ø—Ä–æ—Å: –ö—Ç–æ –º–æ–∂–µ—Ç –ª–µ—Ç–∞—Ç—å?")
  (println "   query: (–ª–µ—Ç–∞—é—â–µ–µ ?X)")
  (doseq [result (tipster/query (–ª–µ—Ç–∞—é—â–µ–µ ?X))]
    (println "   ‚úì " result))) 
