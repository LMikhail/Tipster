(ns tipster.all-tests
  (:require [clojure.test :refer :all]
            [tipster.i18n :as i18n]
            [tipster.terms-test :as terms-test]
            [tipster.bindings-test :as bindings-test]
            [tipster.unification-test :as unification-test]
            [tipster.knowledge-test :as knowledge-test]
            [tipster.solver-test :as solver-test]
            [tipster.integration-test :as integration-test]))

;; === –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –ü–û –ú–û–î–£–õ–Ø–ú ===

(defn run-all-tipster-tests [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  "Run all Tipster tests by modules / –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Tipster –ø–æ –º–æ–¥—É–ª—è–º"
  (println (i18n/t :running-tests lang) "Tipster...")
  (println "=" (apply str (repeat 50 "=")))
  
  (println "\n" (i18n/t :terms-module lang))
  (println "-" (apply str (repeat 30 "-")))
  (terms-test/run-terms-tests)
  
  (println "\n" (i18n/t :bindings-module lang))
  (println "-" (apply str (repeat 30 "-")))
  (bindings-test/run-bindings-tests)
  
  (println "\n" (i18n/t :unification-module lang))
  (println "-" (apply str (repeat 30 "-")))
  (unification-test/run-unification-tests)
  
  (println "\n" (i18n/t :knowledge-module lang))
  (println "-" (apply str (repeat 30 "-")))
  (knowledge-test/run-knowledge-tests)
  
  (println "\n" (i18n/t :solver-module lang))
  (println "-" (apply str (repeat 30 "-")))
  (solver-test/run-solver-tests)
  
  (println "\n" (i18n/t :integration-module lang))
  (println "-" (apply str (repeat 30 "-")))
  (integration-test/run-integration-tests)
  
  (println "\nüéâ" (i18n/t :completed lang) "!")
  (println "=" (apply str (repeat 50 "="))))

(defn run-module-tests [module-name & {:keys [lang] :or {lang (i18n/detect-language)}}]
  "Run tests for specific module / –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"
  (case module-name
    "terms" (terms-test/run-terms-tests)
    "bindings" (bindings-test/run-bindings-tests)
    "unification" (unification-test/run-unification-tests)
    "knowledge" (knowledge-test/run-knowledge-tests)
    "solver" (solver-test/run-solver-tests)
    "integration" (integration-test/run-integration-tests)
    (do 
      (println "‚ùå" (i18n/t :error lang) ":" module-name)
      (println "üìö Available modules / –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏: terms, bindings, unification, knowledge, solver, integration"))))

;; === –¢–ï–°–¢–û–í–´–ï –ù–ê–ë–û–†–´ ===

(defn run-core-tests [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  "Run core tests (terms, bindings, unification) / –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"
  (println "üîß" (i18n/t :core-tests-title lang))
  (terms-test/run-terms-tests)
  (bindings-test/run-bindings-tests)
  (unification-test/run-unification-tests))

(defn run-logic-tests [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  "Run logic tests (knowledge, solver) / –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"
  (println "üß†" (i18n/t :logic-tests-title lang))
  (knowledge-test/run-knowledge-tests)
  (solver-test/run-solver-tests))

(defn run-quick-tests [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  "Run quick tests (main functions) / –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤"
  (println "‚ö°" (i18n/t :quick-tests-title lang))
  (run-tests 'tipster.terms-test
             'tipster.bindings-test
             'tipster.unification-test))

;; === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í ===

(defn test-summary [& {:keys [lang] :or {lang (i18n/detect-language)}}]
  "Show test summary / –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º"
  (println (i18n/t :test-summary-title lang))
  (println (i18n/t :available-commands lang))
  (println "  " (i18n/t :terms-module lang))
  (println "  " (i18n/t :bindings-module lang))
  (println "  " (i18n/t :unification-module lang))
  (println "  " (i18n/t :knowledge-module lang))
  (println "  " (i18n/t :solver-module lang))
  (println "  " (i18n/t :integration-module lang))
  (println "\nüí° Commands / –ö–æ–º–∞–Ω–¥—ã:")
  (println "  (run-all-tipster-tests)        - all tests / –≤—Å–µ —Ç–µ—Å—Ç—ã")
  (println "  (run-module-tests \"name\")      - module tests / —Ç–µ—Å—Ç—ã –º–æ–¥—É–ª—è")
  (println "  (run-core-tests)               - core tests / –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã")
  (println "  (run-logic-tests)              - logic tests / –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã")
  (println "  (run-quick-tests)              - quick tests / –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
  (println "\nüåç Language / –Ø–∑—ã–∫:")
  (println "  Add :lang :ru for Russian / –î–æ–±–∞–≤—å—Ç–µ :lang :ru –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ")
  (println "  Example: (run-all-tipster-tests :lang :ru)"))

;; Show summary on load / –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
(test-summary)
